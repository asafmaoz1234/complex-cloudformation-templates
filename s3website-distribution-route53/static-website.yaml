AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template S3_Website_With_CloudFront_Distribution:
  Sample template showing how to create a website with a custom DNS name, hosted on
  Amazon S3 and served via Amazon CloudFront. It assumes you already have a Hosted
  Zone registered with Amazon Route 53. **WARNING** This template creates an Amazon
  Route 53 DNS record, an S3 bucket and a CloudFront distribution. You will be billed
  for the AWS resources used if you create a stack from this template.'
Parameters:
  # Existing Amazon Route 53 hosted zone
  HostedZone:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  WebsiteRootIndex:
    Type: String
    Description: The root index document for the website
    Default: index.html
  WebsiteErrorIndex:
    Type: String
    Description: The error index document for the website
    Default: 404.html
  # ACM certificate arn of an existing Issued SSL certificate, associated with the domain name
  # ACM should be in us-east1 region
  AcmCertificateArn:
    Type: String
    Description: The ACM certificate arn of an existing us-eas1 Issued SSL certificate
  RedirectFunctionArn:
    Type: String
    Description: The ARN of the Lambda function to redirect requests from www to non www and from the cloudfront distribution to the custom domain

# Mapping of AWS region to S3 website suffix, add other regions if needed
Mappings:
  Region2S3WebsiteSuffix:
    eu-west-1:
      Suffix: .s3-website-eu-west-1.amazonaws.com

Resources:
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${HostedZone}'

  # S3 bucket to hold website content
  S3BucketForWebsiteContent:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # what should happen to a resource when its stack is deleted.
    Properties:
      BucketName: !Sub '${HostedZone}-fe-assets'
      AccessControl: BucketOwnerRead
      WebsiteConfiguration:
        IndexDocument: !Ref WebsiteRootIndex
        ErrorDocument: !Ref WebsiteErrorIndex
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Domain
          Value: !Ref HostedZone
  # S3 bucket policy to allow CloudFront to access the bucket
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketForWebsiteContent
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3BucketForWebsiteContent}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref HostedZone # Description of the distribution.
        Aliases:
          - !Sub '${HostedZone}' # The domain name associated with the distribution.
        Enabled: 'true'
        DefaultRootObject: index.html # The object returned for root URL.
        HttpVersion: http2
        IPV6Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: !Sub '${HostedZone}-fe-assets-origin'
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Authorization
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref RedirectFunctionArn
        Origins:
          - Id: !Sub '${HostedZone}-fe-assets-origin'
            DomainName: !GetAtt S3BucketForWebsiteContent.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

Outputs:
  WebsiteURL:
    Value: !Sub 'http://${HostedZone}'
    Description: The URL of the newly created website
  BucketName:
    Value: !Ref S3BucketForWebsiteContent
    Description: Name of S3 bucket to hold website content
